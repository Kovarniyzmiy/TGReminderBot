import configparser
import json
import logging
import time
import traceback
from datetime import datetime
import re
from addons import *
from tgcalendar import tgcalendar

import sqleditor as sql
import telepot

from telepot.loop import MessageLoop


msgarr = {
    'start': '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n‚ñ´Ô∏è'
             '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–±—è –∏–ª–∏'
             ' –Ω–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º.\n‚ñ´Ô∏è'
             '–ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
             ' –∏ –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.\n‚ñ´Ô∏è–ó–∞ –¥–µ–Ω—å –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ'
             ' –Ω–∞–¥–æ –≤–Ω–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç. –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –≤–Ω–æ—Å–∏—Ç—Å—è, —Ç–æ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –∑–∞–¥–∞—á–µ –∫–∞–∂–¥—ã–π'
             ' –¥–µ–Ω—å.\n‚ñ´Ô∏è–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç ‚Äú–í—ã–ø–æ–ª–Ω–µ–Ω–æ‚Äù –ª–∏–±–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–Ω—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å'
             ' –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.\n‚ñ´Ô∏è–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—á–µ—Ç, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–ª–∏'
             ' –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ä–æ–∫.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n1. –í –æ–±—â–µ–º'
             ' —á–∞—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π (–¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç –≤ —á–∞—Ç –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º).\n2.'
             ' –í —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–ö–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:\n–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ—á–∫—É, –ø–æ—Å–ª–µ '
             '–Ω–µ–µ ‚Äî —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –î–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏—Ç–µ'
             ' @ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n. –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–∞–π–¥—ã {botuname} 30-06\n\n–ï—Å–ª–∏'
             ' –≤—ã –Ω–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Ç–æ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—Å.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n. –í–Ω–µ—Å—Ç–∏'
             ' –ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–∞–π–¥—ã 30-06\n\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É.'
             ' –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–º. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –∏–º—è'
             ' –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n. –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–∞–π–¥—ã'
             ' {botuname} @egor.boss 30-06\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è, —Ç–æ –ø–æ—Å–ª–µ –¥–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ'
             ' –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'
             ' {botuname} 30-06 12:15\n\n–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.\n–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–µ—Ç–µ –≤—Ä–µ–º—è,'
             ' —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ –∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∞'
             ' –∑–∞—Ç–µ–º, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –≤–Ω–µ—Å–µ–Ω, —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n–í—ã'
             ' –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ª–∏–±–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π.'
             ' –î–ª—è —ç—Ç–æ–≥–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–¥–∞—á–∏.',
    'adminurl': '',
    'chatstart':
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! \n'
        '–°–¥–µ–ª–∞–π—Ç–µ @{botuname} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä—è–º–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ '
        '(–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã > –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)\n\n'
        '–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ \help',
    'userfounderror':
        'üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–¥–∞—á–∞ –æ—Ç {name} –ù–ï —Å–æ–∑–¥–∞–Ω–∞\n'
        '{text}\n'
        '–ü—Ä–∏—á–∏–Ω–∞:\n'
        '{uname} - –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ\n\n'
        '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {uname} –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ @{botuname} –∏ –Ω–∞–∂–∞—Ç—å —Ç–∞–º –°—Ç–∞—Ä—Ç. –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üëá',
    'notasks': '–°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π!'
}


def msghandler(data):
    if 'new_chat_participant' in data:
        pass
    elif 'left_chat_participant' in data:
        pass
    elif 'photo' in data:
        pass
    else:
        handler(data)


def skip(data):
    ''


def new_chat_participant(data):
    cid = data['chat']['id']
    if 'new_chat_participant' in data:
        if 'username' in data['new_chat_participant']:
            if data['new_chat_participant']['username'] == bot_uname:
                bot.sendMessage(cid, msgarr['chatstart'].format(botuname=bot_uname))


def left_chat_participant(data):
    # print('left_chat_participant', data)
    ''


def parseTask(text, uid=""):
    now = datetime.now()
    retarray = {
        "year": '',
        "month": '',
        "day": '',
        "hour": '',
        "minute": '',
        'user': '',
        'controller': '',
        'text': '',
        'complete': False,
    }

    taskarray = text.split(" ")
    taskarray.pop(0)
    finaltext = ''
    usercount = 0
    nowtime = {
        "hour": int(now.hour),
        "minute": int(now.minute),
    }
    today = {
        "year": now.year,
        "month": now.month,
        "day": now.day,
    }

    for i in taskarray:
        if i == '':
            continue
        elif re.match(r'^([0-9]|0[0-9]|1?[0-9]|2[0-3]):[0-5]?[0-9]$', i):
            ts = i.split(':')
            retarray['hour'] = ts[0]
            retarray['minute'] = ts[1]
        elif re.match(r'^([0-9]|0[0-9]|1?[0-2])-[0-3]?[0-9]$', i):
            ds = i.split('-')
            retarray['month'] = ds[0]
            retarray['day'] = ds[1]
        elif '@' in i:
            if usercount == 0:
                usid = sql.idbyuname(i.replace('@', ''))
                if usid:
                    retarray['user'] = usid
                    usercount += 1
                else:
                    retarray['user'] = i
                    retarray['usererror'] = True
            else:
                cuid = sql.idbyuname(i.replace('@', ''))
                if cuid:
                    retarray['controller'] = cuid
                else:
                    retarray['controller'] = i
                    retarray['controllererror'] = True
        else:
            finaltext += i + ' '
    if not retarray['user']:
        retarray['user'] = uid
    if not retarray['controller']:
        retarray['controller'] = uid
    retarray['text'] = finaltext

    if retarray['hour']:
        if int(retarray['hour']) == nowtime['hour']:
            if int(retarray['minute']) <= nowtime['minute']:
                retarray['hour'] = ''
                retarray['minute'] = ''
        elif int(retarray['hour']) <= nowtime['hour']:
            retarray['hour'] = ''
            retarray['minute'] = ''

    for k, v in today.items():
        if not retarray[k]:
            retarray[k] = v
    return retarray


def genTaskText(task):
    text = 'üÜï –ó–∞–¥–∞—á–∞ –æ—Ç {user}\n' \
           '*{text}*\n'
    if task['day'] and task['month']:
        if task['hour'] and task['minute']:
            text += '–°—Ä–æ–∫: {hour}:{minute} {day}-{month}'
        else:
            text += '–°—Ä–æ–∫: {day}-{month}'
        if int(datetime.now().year) < int(task['year']):
            text += '-{year}'
        text += '\n'
    text = text.format(**task)
    return text


def genRetTaskText(task):
    text = 'üÜï –ó–∞–¥–∞—á–∞ –æ—Ç {user}\n' \
           '*{text}*\n'
    if task['day'] and task['month']:
        if task['hour'] and task['minute']:
            text += '–°—Ä–æ–∫: {hour}:{minute} {day}-{month}'
        else:
            text += '–°—Ä–æ–∫: {day}-{month}'
        if int(datetime.now().year) < int(task['year']):
            text += '-{year}'
        text += '\n'
    if task['name'] != '':
        task['user'] = task['name']
    elif task['user'][0] != '@':
        task['user'] = '@' + task['user']

    text = text.format(**task)
    return text


def genCancelTaskText(task):
    text = 'üö´ {user} –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É\n' \
           '*{text}*\n'
    if task['day'] and task['month']:
        if task['hour'] and task['minute']:
            text += '–°—Ä–æ–∫: {hour}:{minute} {day}-{month}'
        else:
            text += '–°—Ä–æ–∫: {day}-{month}'
        if int(datetime.now().year) < int(task['year']):
            text += '-{year}'
        text += '\n'
    if task['name'] != '':
        task['user'] = task['name']
    elif task['user'][0] != '@':
        task['user'] = '@' + task['user']

    text = text.format(**task)
    return text


def genEditTaskText(task):
    text = 'üîú {user} –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç –∑–∞–¥–∞—á—É\n' \
           '*{text}*\n'
    if task['day'] and task['month']:
        if task['hour'] and task['minute']:
            text += '–°—Ä–æ–∫: {hour}:{minute} {day}-{month}'
        else:
            text += '–°—Ä–æ–∫: {day}-{month}'
        if int(datetime.now().year) < int(task['year']):
            text += '-{year}'
        text += '\n'
    if task['name'] != '':
        task['user'] = task['name']
    elif task['user'][0] != '@':
        task['user'] = '@' + task['user']

    text = text.format(**task)
    return text


def genCompleteTaskText(task):
    text = '‚úÖ {user} –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n' \
           '*{text}*\n'
    # if task['day'] and task['month']:
    #     if task['hour'] and task['minute']:
    #         text += '–°—Ä–æ–∫: {hour}:{minute} {day}-{month}'
    #     else:
    #         text += '–°—Ä–æ–∫: {day}-{month}'
    #     if int(datetime.now().year) < int(task['year']):
    #         text += '-{year}'
    #     text += '\n'
    if task['name'] != '':
        task['user'] = task['name']
    elif task['user'][0] != '@':
        task['user'] = '@' + task['user']

    text = text.format(**task)
    return text


def genPrivTaskText(task):
    text = genTaskText(task)
    return text


def kicked(data):  # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞
    print('kicked', data)
    return None


def member(data):  # –ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    uid = data['chat']['id']
    # sql.adduser(uid, '')
    # sql.editusermode(uid, 'polssogl')
    # bot.sendMessage('–ø—Ä–∏–≤–µ—Ç', reply_markup=InlineKeyboard(['–ü—Ä–∏–Ω–∏–º–∞—é']))


def handler(data):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        cid = data['chat']['id']
        uid = data['from']['id']
        msgid = (cid, data['message_id'])  # –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        chattype = data['chat']['type']
        text = data['text']
        usermode = sql.usermode(uid)

        if 'username' in data['chat']:
            username = data['chat']['username']
        elif data['from'] and 'username' in data['from']:
            username = data['from']['username']
        else:
            username = ''
        if 'first_name' in data['chat']:
            name = data['chat']['first_name']
        else:
            name = ''
        if not usermode:
            sql.adduser(uid, username, name, chattype)
            usermode = 'start'

        # if usermode == 'start':  # –ü–µ—Ä–≤—ã–π —à–∞–≥ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
        #     sql.editusermode(uid, 'menu')
        # elif text == '–ü—Ä–∏–≤–µ—Ç':
        #     bot.sendMessage(uid, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –°–¥–µ–ª–∞–π—Ç–µ {} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,'
        #                          ' —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä—è–º–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'
        #                          ' (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã > –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)'.format(bot_uname))

        if '/start' in text:
            sql.editusermode(uid, 'main')
            bot.sendMessage(uid, msgarr['start'].format(botuname="@" + bot_uname))
        elif '/control' == text:
            t = sql.gettasks(uid, rule=1)
            if t:
                for i in t:
                    lid = i['ID']
                    bot.sendMessage(uid,
                                    genRetTaskText(i),
                                    reply_markup=InlineKeyboard([[
                                        {'text': '–û—Ç–º–µ–Ω–∏—Ç—å', 'callback': 'cancel_' + str(lid)},
                                        {'text': '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', 'callback': 'change_' + str(lid)},
                                        {'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'callback': 'complete_' + str(lid)},
                                    ]]),
                                    parse_mode='Markdown'
                                    )
                bot.deleteMessage(msgid)
            else:
                bot.sendMessage(uid, msgarr['notasks'])
                bot.deleteMessage(msgid)
        elif '/my' == text:
            t = sql.gettasks(uid, rule=0)
            if t:
                for i in t:
                    lid = i['ID']
                    bot.sendMessage(uid,
                                    genRetTaskText(i),
                                    reply_markup=InlineKeyboard([[
                                        {'text': '–û—Ç–º–µ–Ω–∏—Ç—å', 'callback': 'cancel_' + str(lid)},
                                        {'text': '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', 'callback': 'change_' + str(lid)},
                                        {'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'callback': 'complete_' + str(lid)},
                                    ]]),
                                    parse_mode='Markdown'
                                    )
                bot.deleteMessage(msgid)
            else:
                bot.sendMessage(uid, msgarr['notasks'])
                bot.deleteMessage(msgid)
        elif text == '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
            bot.sendMessage(
                uid,
                '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', reply_markup=InlineKeyboard([
                    {
                        'text': '–ù–∞–ø–∏—Å–∞—Ç—å',
                        'url': msgarr['adminurl'],
                    }
                ])
            )
        elif text.lower() == '/help':
            bot.sendMessage(uid, '–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start')
        elif text[0] == '.':
            task = parseTask(text, uid)

            if 'usererror' in task and task['usererror']:
                bot.sendMessage(cid,
                msgarr['userfounderror'].format(
                    botuname=bot_uname,
                    uname=task['user'],
                    name=username,
                    text=task['text']
                ), reply_markup=InlineKeyboard([
                    {'text': '–í –±–æ—Ç!', 'url': 't.me/' + bot_uname + '?start=start'}
                ]))
                bot.deleteMessage(msgid)
            elif 'controllererror' in task and task['controllererror']:
                bot.sendMessage(cid,
                msgarr['userfounderror'].format(
                    botuname=bot_uname,
                    uname=task['controller'],
                    name=username,
                    text=task['text']
                ), reply_markup=InlineKeyboard([
                    {'text': '–í –±–æ—Ç!', 'url': 't.me/' + bot_uname + '?start=start'}
                ]))
                bot.deleteMessage(msgid)
            else:
                wid = task['user']
                lid = sql.addtask(cid, task)
                name = sql.namebyid(task['user'])
                if name:
                    task['user'] = '@' + sql.unamebyid(task['user'])
                else:
                    task['user'] = '@' + sql.unamebyid(task['user'])
                task['controller'] = sql.unamebyid(task['controller'])
                if chattype != 'private':
                    bot.sendMessage(cid, genTaskText(task), parse_mode='Markdown')
                bot.sendMessage(wid,
                                genPrivTaskText(task),
                                reply_markup=InlineKeyboard([[
                                    {'text': '–û—Ç–º–µ–Ω–∏—Ç—å', 'callback': 'cancel_' + str(lid)},
                                    {'text': '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', 'callback': 'change_' + str(lid)},
                                    {'text': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'callback': 'complete_' + str(lid)},
                                ]]),
                                parse_mode='Markdown')
                bot.deleteMessage(msgid)

    except Exception as e:
        logging.error(e)
        logging.error(traceback.format_exc())


def on_callback_query(data):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query
    try:
        print(data)
        uid = data['from']['id']  # –∞–π–¥–∏ —é–∑–µ—Ä–∞
        usermode = sql.usermode(uid)
        text = data['data']  # –¢–µ–∫—Å—Ç –∫–∞–ª–ª–±–µ–∫–∞
        msgid = (uid, data['message']['message_id'])  # –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        if 'sel_' in text:
            if 'sel_d_' in text:
                pd = text.replace("sel_d_", "")
                tid, pd = pd.split('_')
                if pd != "-":
                    tpd = pd.split('-')
                    sql.edittaskdate(tid, tpd[0], tpd[1], tpd[2])
                    td = sql.gettask(tid)
                    bot.sendMessage(uid, genEditTaskText(td), parse_mode='Markdown')
                bot.deleteMessage(msgid)
            elif 'sel_m_' in text:
                pd = text.replace("sel_m_", "")
                tid, pd = pd.split('_')
                if pd != "-":
                    tc = tgcalendar(parse=pd, TID=tid)
                    bot.editMessageReplyMarkup(msgid, reply_markup=InlineKeyboard(tc.create()))
            elif 'sel_y_' in text:
                pd = text.replace("sel_y_", "")
                tid, pd = pd.split('_')
                if pd != "-":
                    tc = tgcalendar(parse=pd, TID=tid)
                    bot.editMessageReplyMarkup(msgid, reply_markup=InlineKeyboard(tc.create()))
        elif 'cancel_' in text:
            tid = text.replace("cancel_", '')
            ta = sql.gettask(tid)
            sql.edittaskstatus(tid, 'canceled')
            bot.editMessageText(msgid, genCancelTaskText(ta), parse_mode='Markdown')
        elif 'complete_' in text:
            tid = text.replace("complete_", '')
            ta = sql.gettask(tid)
            sql.edittaskstatus(tid, 'complete')
            bot.editMessageText(msgid, genCompleteTaskText(ta), parse_mode='Markdown')
        elif 'change_' in text:
            tid = text.replace("change_", '')
            td = sql.gettask(tid)
            tc = tgcalendar(month=td['month'], year=td['year'], TID=tid)
            bot.sendMessage(
                uid,
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É:', reply_markup=InlineKeyboard(tc.create())
            )
            bot.deleteMessage(msgid)
        # if text == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ':
        #     task = parseTask(text)
        #     bot.sendMessage(uid, '‚úÖ {user} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É\n'
        #                          '{text}\n'
        #                          '–°—Ä–æ–∫: {data} {time}\n\n'
        #                          '–∑–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤'.format(**task),
        #                 reply_markup=InlineKeyboard([['üîÑ –°–¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º']]))

        if text == 'üîÑ –°–¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º':
            task = parseTask(text)

            bot.sendMessage(uid, '–ù–∞ –∫–æ–≥–¥–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n'
                             '–ö–ê–õ–ï–ù–î–ê–†–¨ –í–ñ–£–•\n'
                             .format(**task))

    except Exception as e:
        logging.error(e)
        logging.error(traceback.format_exc())


if __name__ == '__main__':
    logging.basicConfig(filename=path + "main.log", level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S')
    logging.info('------------------START LOGGING------------------')

    token = LOAD_CONFIG()
    sql.__init__(dbpath)
    bot = telepot.Bot(token)

    try:
        MessageLoop(bot, {'chat': msghandler,
                          'callback_query': on_callback_query,
                          'kicked': kicked,
                          'left_chat_participant': left_chat_participant,
                          'left_chat_member': skip,
                          'new_chat_participant': new_chat_participant,
                          'new_chat_member': skip,
                          'member': member}).run_as_thread()
    except Exception as e:
        logging.error(e)
    print(bot.getMe())
    bot_uname = bot.getMe()['username']


    # handler({'message_id': 60,
    #          'from': {'id': 5256680529, 'is_bot': False, 'first_name': '–õ–µ–≤', 'username': 'LevAlexeevich',
    #                   'language_code': 'ru'},
    #          'chat': {'id': -780148312, 'title': '1', 'type': 'group', 'all_members_are_administrators': True},
    #          'date': 1670387422, 'text': '. –∑–¥—á'})


    while 1:
        time.sleep(1)
